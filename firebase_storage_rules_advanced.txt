================================================================================
Firebase Storage 보안 규칙 (개선 버전)
================================================================================

📦 프로젝트 ID: makecallio
🔗 Firebase Console: https://console.firebase.google.com/project/makecallio/storage/rules

================================================================================
복사할 보안 규칙 (아래 전체 내용을 복사하세요)
================================================================================

rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // 프로필 이미지: 인증된 사용자만 자신의 이미지 업로드/삭제 가능
    // 파일명 형식: {userId}.{확장자}
    match /profile_images/{fileName} {
      // 모든 사용자가 프로필 이미지 조회 가능
      allow read: if true;
      
      // 파일 이름이 '{로그인한사용자UID}.{jpg|jpeg|png|gif}' 형식인지 확인
      allow write: if request.auth != null && 
                      fileName.matches('^' + request.auth.uid + '\\.(jpg|jpeg|png|gif)$');
      
      allow delete: if request.auth != null && 
                       fileName.matches('^' + request.auth.uid + '\\.(jpg|jpeg|png|gif)$');
    }
    
    // 기타 파일: 인증된 사용자만 접근 가능
    match /{allPaths=**} {
      allow read, write: if request.auth != null;
    }
  }
}

================================================================================
기본 버전과의 차이점
================================================================================

기본 버전 (firebase_storage_rules.txt):
----------------------------------------
match /profile_images/{userId} {
  allow write: if request.auth != null && request.auth.uid == userId;
}

문제점:
- {userId}는 파일 이름 전체를 매칭 (예: "abc123.jpg")
- request.auth.uid는 확장자 없는 UID (예: "abc123")
- "abc123" != "abc123.jpg" 이므로 권한 거부됨


개선 버전 (이 파일):
----------------------------------------
match /profile_images/{fileName} {
  allow write: if request.auth != null && 
                  fileName.matches('^' + request.auth.uid + '\\.(jpg|jpeg|png|gif)$');
}

장점:
✅ 파일 이름에서 UID 부분 추출하여 검증
✅ 확장자 제한 (jpg, jpeg, png, gif만 허용)
✅ 정확한 권한 검증
✅ 보안 강화

================================================================================
설정 방법
================================================================================

1단계: Firebase Console 접속
   https://console.firebase.google.com/project/makecallio/storage/rules

2단계: 위의 보안 규칙 복사
   - 위의 'rules_version'부터 마지막 '}'까지 전체 복사

3단계: Firebase Console에 붙여넣기
   - Storage → Rules 탭으로 이동
   - 기존 규칙을 모두 삭제하고 복사한 규칙 붙여넣기

4단계: '게시' 버튼 클릭
   - 변경사항 저장 및 적용

================================================================================
보안 규칙 상세 설명
================================================================================

✅ 프로필 이미지 (profile_images/{fileName}):
   
   읽기 권한:
   - 모든 사용자가 조회 가능 (read: if true)
   - 다른 사용자의 프로필 이미지도 볼 수 있음
   
   쓰기/삭제 권한:
   - 로그인 필수: request.auth != null
   - 파일 이름 형식 확인: {UID}.{확장자}
   - 허용 확장자: jpg, jpeg, png, gif
   - UID 일치 확인: 파일 이름의 UID 부분이 로그인한 사용자 UID와 일치해야 함
   
   예시:
   사용자 UID: abc123
   ✅ 허용: profile_images/abc123.jpg
   ✅ 허용: profile_images/abc123.png
   ✅ 허용: profile_images/abc123.jpeg
   ✅ 허용: profile_images/abc123.gif
   ❌ 거부: profile_images/abc123.bmp (확장자 불일치)
   ❌ 거부: profile_images/xyz789.jpg (UID 불일치)
   ❌ 거부: profile_images/abc123 (확장자 없음)

✅ 기타 파일 (/{allPaths=**}):
   - 인증된 사용자만 읽기/쓰기 가능
   - request.auth != null 조건

================================================================================
정규식 패턴 설명
================================================================================

fileName.matches('^' + request.auth.uid + '\\.(jpg|jpeg|png|gif)$')

구성 요소:
- ^: 문자열 시작
- request.auth.uid: 로그인한 사용자의 UID
- \\.: 점(.) 문자 (이스케이프)
- (jpg|jpeg|png|gif): 허용된 확장자 중 하나
- $: 문자열 끝

예시:
request.auth.uid = "abc123"
패턴: ^abc123\.(jpg|jpeg|png|gif)$

매칭 성공:
✅ abc123.jpg
✅ abc123.jpeg
✅ abc123.png
✅ abc123.gif

매칭 실패:
❌ abc123.bmp (확장자 불일치)
❌ xyz789.jpg (UID 불일치)
❌ abc123 (확장자 없음)
❌ abc123.jpg.tmp (추가 확장자)

================================================================================
테스트 시나리오
================================================================================

시나리오 1: 정상 업로드
- 사용자: UID = abc123
- 파일: abc123.jpg
- 결과: ✅ 성공

시나리오 2: 잘못된 UID
- 사용자: UID = abc123
- 파일: xyz789.jpg
- 결과: ❌ 거부 (UID 불일치)

시나리오 3: 잘못된 확장자
- 사용자: UID = abc123
- 파일: abc123.bmp
- 결과: ❌ 거부 (확장자 불일치)

시나리오 4: 비인증 사용자
- 사용자: 로그아웃 상태
- 파일: abc123.jpg
- 결과: ❌ 거부 (인증 필요)

시나리오 5: 다른 사용자 이미지 조회
- 사용자: UID = abc123
- 조회: xyz789.jpg
- 결과: ✅ 성공 (읽기는 모두 허용)

================================================================================
추천 사용 시나리오
================================================================================

기본 버전 (firebase_storage_rules.txt) 사용:
✅ 빠른 테스트가 필요한 경우
✅ 개발 초기 단계
✅ 보안이 덜 중요한 경우

개선 버전 (이 파일) 사용:
✅ 프로덕션 환경
✅ 보안이 중요한 경우
✅ 파일 확장자 제한이 필요한 경우
✅ 정밀한 권한 관리가 필요한 경우

================================================================================
참고 사항
================================================================================

1. 이 규칙을 사용하려면 AuthService의 uploadProfileImage() 메서드가
   파일을 '{userId}.jpg' 형식으로 업로드해야 합니다. (현재 그렇게 구현됨)

2. 파일 확장자를 추가하려면 정규식 패턴 수정:
   (jpg|jpeg|png|gif|webp|avif)

3. 파일 크기 제한은 Firebase Storage 설정에서 별도로 관리:
   현재 앱에서는 10MB 제한 (AuthService)

4. 파일 이름 형식을 변경하려면 정규식 패턴 수정 필요

================================================================================
문제 해결
================================================================================

문제: 규칙 적용 후에도 업로드 실패
원인: 파일 이름 형식이 규칙과 일치하지 않음
해결: AuthService에서 파일 이름이 '{UID}.{확장자}' 형식인지 확인

문제: 확장자 제한 추가하고 싶음
해결: 정규식 패턴에 원하는 확장자 추가
예: '\\.(jpg|jpeg|png|gif|webp)$'

문제: 기본 버전과 개선 버전 중 선택
해결:
- 개발/테스트: 기본 버전
- 프로덕션: 개선 버전 (이 파일)

================================================================================
